<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.job.feign.provider.dao.ResumeMapper" >
  <resultMap id="BaseResultMap" type="com.job.feign.provider.domain.Resume" >
    <id column="nid" property="nid" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="degree" property="degree" jdbcType="INTEGER" />
    <result column="gender" property="gender" jdbcType="INTEGER" />
    <result column="id" property="id" jdbcType="VARCHAR" />
    <result column="major" property="major" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.job.feign.provider.domain.Resume" extends="BaseResultMap" >
    <result column="workExperienceList" property="workexperiencelist" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    nid, age, degree, gender, id, major, password
  </sql>
  <sql id="Blob_Column_List" >
    workExperienceList
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.job.feign.provider.domain.ResumeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from resume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.job.feign.provider.domain.ResumeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from resume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from resume
    where nid = #{nid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from resume
    where nid = #{nid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.job.feign.provider.domain.ResumeExample" >
    delete from resume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.job.feign.provider.domain.Resume" >
    insert into resume (nid, age, degree, 
      gender, id, major, 
      password, workExperienceList)
    values (#{nid,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER}, #{degree,jdbcType=INTEGER}, 
      #{gender,jdbcType=INTEGER}, #{id,jdbcType=VARCHAR}, #{major,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{workexperiencelist,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.job.feign.provider.domain.Resume" >
    insert into resume
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="nid != null" >
        nid,
      </if>
      <if test="age != null" >
        age,
      </if>
      <if test="degree != null" >
        degree,
      </if>
      <if test="gender != null" >
        gender,
      </if>
      <if test="id != null" >
        id,
      </if>
      <if test="major != null" >
        major,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="workexperiencelist != null" >
        workExperienceList,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="nid != null" >
        #{nid,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        #{age,jdbcType=INTEGER},
      </if>
      <if test="degree != null" >
        #{degree,jdbcType=INTEGER},
      </if>
      <if test="gender != null" >
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="major != null" >
        #{major,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="workexperiencelist != null" >
        #{workexperiencelist,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.job.feign.provider.domain.ResumeExample" resultType="java.lang.Integer" >
    select count(*) from resume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update resume
    <set >
      <if test="record.nid != null" >
        nid = #{record.nid,jdbcType=VARCHAR},
      </if>
      <if test="record.age != null" >
        age = #{record.age,jdbcType=INTEGER},
      </if>
      <if test="record.degree != null" >
        degree = #{record.degree,jdbcType=INTEGER},
      </if>
      <if test="record.gender != null" >
        gender = #{record.gender,jdbcType=INTEGER},
      </if>
      <if test="record.id != null" >
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.major != null" >
        major = #{record.major,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.workexperiencelist != null" >
        workExperienceList = #{record.workexperiencelist,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update resume
    set nid = #{record.nid,jdbcType=VARCHAR},
      age = #{record.age,jdbcType=INTEGER},
      degree = #{record.degree,jdbcType=INTEGER},
      gender = #{record.gender,jdbcType=INTEGER},
      id = #{record.id,jdbcType=VARCHAR},
      major = #{record.major,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      workExperienceList = #{record.workexperiencelist,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update resume
    set nid = #{record.nid,jdbcType=VARCHAR},
      age = #{record.age,jdbcType=INTEGER},
      degree = #{record.degree,jdbcType=INTEGER},
      gender = #{record.gender,jdbcType=INTEGER},
      id = #{record.id,jdbcType=VARCHAR},
      major = #{record.major,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.job.feign.provider.domain.Resume" >
    update resume
    <set >
      <if test="age != null" >
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="degree != null" >
        degree = #{degree,jdbcType=INTEGER},
      </if>
      <if test="gender != null" >
        gender = #{gender,jdbcType=INTEGER},
      </if>
      <if test="id != null" >
        id = #{id,jdbcType=VARCHAR},
      </if>
      <if test="major != null" >
        major = #{major,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="workexperiencelist != null" >
        workExperienceList = #{workexperiencelist,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where nid = #{nid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.job.feign.provider.domain.Resume" >
    update resume
    set age = #{age,jdbcType=INTEGER},
      degree = #{degree,jdbcType=INTEGER},
      gender = #{gender,jdbcType=INTEGER},
      id = #{id,jdbcType=VARCHAR},
      major = #{major,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      workExperienceList = #{workexperiencelist,jdbcType=LONGVARCHAR}
    where nid = #{nid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.job.feign.provider.domain.Resume" >
    update resume
    set age = #{age,jdbcType=INTEGER},
      degree = #{degree,jdbcType=INTEGER},
      gender = #{gender,jdbcType=INTEGER},
      id = #{id,jdbcType=VARCHAR},
      major = #{major,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR}
    where nid = #{nid,jdbcType=VARCHAR}
  </update>
  
    <!-- 上传批处理 -->
  <insert id="batchInsertResume" parameterType="java.util.List">
	insert into resume (nid, age, degree, 
      gender, id, major, 
      workExperienceList)
    values
	<foreach collection="list" item="ResumeList" index="index" separator=",">
	 (#{ResumeList.nid,jdbcType=VARCHAR}, #{ResumeList.age,jdbcType=INTEGER}, #{ResumeList.degree,jdbcType=INTEGER}, 
      #{ResumeList.gender,jdbcType=INTEGER}, #{ResumeList.id,jdbcType=VARCHAR}, #{ResumeList.major,jdbcType=VARCHAR}, 
      #{ResumeList.workexperiencelist,jdbcType=LONGVARBINARY})
  </foreach>
</insert>
</mapper>